


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Chloe Larsen, Rene Kruger & Kayla Beyers
 */
import java.sql.*;
import java.time.*;
import javax.swing.*;
import javax.swing.table.*;
public class CarbonEmissionReport extends javax.swing.JFrame {
    ChooseUser userObj = new ChooseUser();//Creating an object of the ChooseUser class so that the accesor method can be accessed
    String sql = userObj.getSQL();
    DatabaseConnect CarbonDB = new DatabaseConnect("CarbonCalculatorDB.accdb");//Connecting the access database by using the DatabaseConnect class
    
    

    /**
     * Creates new form CarbonEmissionReport
     */
    public CarbonEmissionReport() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void displayTotalCarbonFOrUser(){//helper method that displays total carbon emissions of the chosen user
        try{
            ResultSet query = CarbonDB.query(sql);//creating the resultset of the entered query        
            double co2 = 0;//Initialise the variable that will store the total carbon amount
            while(query.next()){//getting the information of each record
                int driverID = query.getInt("DriverID");//getting the DriverID
                double distance = query.getDouble("Distance");//getting the total distance travelled per drive, i.e. from where the driver accepted the drive until the rider has been dropped off
                int co2gkm = 0;//Initialises a variable that stores the different CO2.g.km of the different drivers cars
                switch (driverID) {
                    case 8://driver 8 drives a Toyota Camry, vehicleID num  = 8
                        co2gkm = 120;//CO2.g.km of the car
                        break;
                    
                    case 9://driver 9 drives a Hyundai Elantra, vehicleID num  = 14
                        co2gkm = 100;//CO2.g.km of the car
                        break;
                        
                    case 10://driver 10 drives a Volkswagen Golf, vehicleID num  = 11
                        co2gkm = 110;//CO2.g.km of the car
                        break;
                        
                    case 11://driver 11 drives a Toyota Camry, vehicleID num  = 8
                        co2gkm = 120;//CO2.g.km of the car
                        break;
                        
                    case 12://driver 12 drives a Ford Explorer, vehicleID num  = 9
                        co2gkm = 180;//CO2.g.km of the car
                        break;
                        
                    case 13://driver 13 drives a Nissan Rogue, vehicleID num  = 13
                        co2gkm = 150;//CO2.g.km of the car
                        break;
                        
                    case 14://driver 14 drives a Honda Civic, vehicleID num  = 10
                        co2gkm = 95;//CO2.g.km of the car
                        break;
                        
                    case 15://driver 15 drives a Chevrolet Malibu, vehicleID num  = 12
                        co2gkm = 130;//CO2.g.km of the car
                        break;
                        
                    case 16://driver 16 drives a Chevrolet Malibu, vehicleID num  = 12
                        co2gkm = 130;//CO2.g.km of the car
                        break;
                        
                    case 17:
                        //driver 17 drives a Nissan Rogue, vehicleID num  = 13
                        co2gkm = 150;//CO2.g.km of the car
                        break;
                        
                    case 18://driver 18 drives a Hyundai Elantra, vehicleID num  = 14
                        co2gkm = 100;//CO2.g.km of the car
                        break;
                    default:
                        break;
                }
                co2 += distance * co2gkm;  //calculating the co2 for the whole trip my multiplying the CO2.g.km by the distance                                                              
                
            }          
            txtOutput.setText(co2 + "g");//setting the text in the output field in CarbonEmissionReport
        }catch (SQLException ex) {//if data is not compatible  
            JOptionPane.showMessageDialog(null,"There was a problem");
        }
    }
    
    
    public void displayTblRide(){//helper method that displays the ride information in tblRide based on the provided SQL query. 
        try{
            ResultSet query = CarbonDB.query(sql);//creating the resultset of the entered query
            DefaultTableModel table = (DefaultTableModel) tblRide.getModel();//getting the model of the table
            table.setRowCount(0);//setting the row count for the table
            boolean isDataFound = false; //checking if data was added to the table
            String month = "", year = "";
            
            while(query.next()){//getting the information of each record
                int rideId = query.getInt("RideID");//the unique id of each ride
                int driverID = query.getInt("DriverID");//the unique id of each driver                
                String startLocation = query.getString("StartLocation");//the start location, i.e where the user was picked up from
                String destination = query.getString("Destination");//the end location, i.e. where the user was dropped off                                              
                LocalDate acceptDate = LocalDate.parse(query.getString("AcceptDateTime").substring(0, query.getString("AcceptDateTime").indexOf(" ")));//the time and date the driver accepted the drive
                LocalTime acceptTime = LocalTime.parse(query.getString("AcceptDateTime").substring(query.getString("AcceptDateTime").indexOf(" ") + 1, query.getString("AcceptDateTime").indexOf(".")));//the time and date the driver accepted the drive                
                LocalDate endDate = LocalDate.parse(query.getString("AcceptDateTime").substring(0, query.getString("AcceptDateTime").indexOf(" ")));//the time and date the driver accepted the drive
                LocalTime endTime = LocalTime.parse(query.getString("endDateTime").substring(query.getString("endDateTime").indexOf(" ") + 1, query.getString("endDateTime").indexOf(".")));//the time and date the driver accepted the drive
                double distance = query.getDouble("Distance");//to total distance travelled from when the drive was accepted until the destination was reached
                int co2gkm = 0;//Initialize the co2.g.km
                switch (driverID) {
                    case 8://driver 8 drives a Toyota Camry, vehicleID num  = 8
                        co2gkm = 120;//CO2.g.km of the car
                        break;
                    
                    case 9://driver 9 drives a Hyundai Elantra, vehicleID num  = 14
                        co2gkm = 100;//CO2.g.km of the car
                        break;
                        
                    case 10://driver 10 drives a Volkswagen Golf, vehicleID num  = 11
                        co2gkm = 110;//CO2.g.km of the car
                        break;
                        
                    case 11://driver 11 drives a Toyota Camry, vehicleID num  = 8
                        co2gkm = 120;//CO2.g.km of the car
                        break;
                        
                    case 12://driver 12 drives a Ford Explorer, vehicleID num  = 9
                        co2gkm = 180;//CO2.g.km of the car
                        break;
                        
                    case 13://driver 13 drives a Nissan Rogue, vehicleID num  = 13
                        co2gkm = 150;//CO2.g.km of the car
                        break;
                        
                    case 14://driver 14 drives a Honda Civic, vehicleID num  = 10
                        co2gkm = 95;//CO2.g.km of the car
                        break;
                        
                    case 15://driver 15 drives a Chevrolet Malibu, vehicleID num  = 12
                        co2gkm = 130;//CO2.g.km of the car
                        break;
                        
                    case 16://driver 16 drives a Chevrolet Malibu, vehicleID num  = 12
                        co2gkm = 130;//CO2.g.km of the car
                        break;
                        
                    case 17:
                        //driver 17 drives a Nissan Rogue, vehicleID num  = 13
                        co2gkm = 150;//CO2.g.km of the car
                        break;
                        
                    case 18://driver 18 drives a Hyundai Elantra, vehicleID num  = 14
                        co2gkm = 100;//CO2.g.km of the car
                        break;
                    default:
                        break;
                }
                String co2Calc = distance + " * " + co2gkm + " = ";
                double co2 = distance * co2gkm;//calculation the co2 of the ride                        
                Object data = new Object[]{rideId,driverID, startLocation, destination, acceptDate, acceptTime, endDate, endTime, distance,co2Calc , co2};  //object array of the record collected
                table.addRow((Object[]) data);//adding the record into the tblRide
                isDataFound = true;//Saying that it was added to the table
                month = acceptDate.getMonth() + "";
                year = acceptDate.getYear() + "";
            }
            lblHeading.setText("Carbon Report For " + month + " " + year + ":");            
            if(!isDataFound){// If it didn't work, show an error message
                JOptionPane.showMessageDialog(null, " Error There is no matching data found");
            }                                                    
            
        }catch (SQLException ex) {//if data is not compatible  
            JOptionPane.showMessageDialog(null,"Cannot execute query");
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        pnlCarbonReport = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        bntDone = new javax.swing.JButton();
        lblHeading = new javax.swing.JLabel();
        Separator = new javax.swing.JSeparator();
        txtOutput = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRide = new javax.swing.JTable();
        lblTotalCarbonOutput = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblCity = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CO2 Emission Report");

        pnlCarbonReport.setBackground(new java.awt.Color(255, 255, 255));

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Back Button.png"))); // NOI18N
        btnBack.setBorder(null);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        bntDone.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        bntDone.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Done.png"))); // NOI18N
        bntDone.setBorder(null);
        bntDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntDoneActionPerformed(evt);
            }
        });

        lblHeading.setFont(new java.awt.Font("Uber Move", 1, 30)); // NOI18N
        lblHeading.setText("Carbon Report For September 2023");

        Separator.setForeground(new java.awt.Color(204, 204, 204));
        Separator.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        txtOutput.setFont(new java.awt.Font("SF UI Display", 0, 20)); // NOI18N

        tblRide.setFont(new java.awt.Font("SF UI Display", 0, 12)); // NOI18N
        tblRide.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RideID", "DriverID", "StartLocation", "Destination", "AcceptDate", "AcceptTime", "EndDate", "EndTime", "Distance (km)", "CO2 Calculation", "CO2Output(g)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblRide);
        if (tblRide.getColumnModel().getColumnCount() > 0) {
            tblRide.getColumnModel().getColumn(0).setPreferredWidth(10);
            tblRide.getColumnModel().getColumn(1).setPreferredWidth(10);
            tblRide.getColumnModel().getColumn(8).setPreferredWidth(25);
        }

        lblTotalCarbonOutput.setFont(new java.awt.Font("Uber Move", 0, 20)); // NOI18N
        lblTotalCarbonOutput.setText("Total Carbon Output:");

        jSeparator1.setForeground(new java.awt.Color(204, 204, 204));

        lblCity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/City Small.png"))); // NOI18N

        javax.swing.GroupLayout pnlCarbonReportLayout = new javax.swing.GroupLayout(pnlCarbonReport);
        pnlCarbonReport.setLayout(pnlCarbonReportLayout);
        pnlCarbonReportLayout.setHorizontalGroup(
            pnlCarbonReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Separator)
            .addComponent(jSeparator1)
            .addGroup(pnlCarbonReportLayout.createSequentialGroup()
                .addGroup(pnlCarbonReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCarbonReportLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(lblTotalCarbonOutput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bntDone))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCarbonReportLayout.createSequentialGroup()
                        .addGroup(pnlCarbonReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCarbonReportLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1356, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCarbonReportLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblHeading)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlCarbonReportLayout.setVerticalGroup(
            pnlCarbonReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCarbonReportLayout.createSequentialGroup()
                .addGroup(pnlCarbonReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCarbonReportLayout.createSequentialGroup()
                        .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCarbonReportLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlCarbonReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlCarbonReportLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(lblHeading)))
                        .addGap(18, 18, 18)))
                .addComponent(Separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(pnlCarbonReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bntDone)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCarbonReportLayout.createSequentialGroup()
                        .addGroup(pnlCarbonReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotalCarbonOutput))
                        .addGap(18, 18, 18)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCarbonReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(pnlCarbonReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntDoneActionPerformed
        System.exit(0);//Ending the run of the program
    }//GEN-LAST:event_bntDoneActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        ChooseUser jFChooseUser = new ChooseUser();//Creating an object to access the first JFrame
        jFChooseUser.show(); // Opening JFrame with ChooseUser
        dispose(); // closing CarbonEmissionReport JFrame
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("FlatLaf Light".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarbonEmissionReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarbonEmissionReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarbonEmissionReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarbonEmissionReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarbonEmissionReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator Separator;
    private javax.swing.JButton bntDone;
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblTotalCarbonOutput;
    private javax.swing.JPanel pnlCarbonReport;
    private javax.swing.JTable tblRide;
    private javax.swing.JTextField txtOutput;
    // End of variables declaration//GEN-END:variables
}
